--------------------------------------------------------------------------------
15 November 2013

Started work on abstraction of serial output frame timing.
Draw diagrams.  Make symbolic names for times.
Use a consistent layered approach.

Make spreadsheet to calculate dependent values.

--------------------------------------------------------------------------------
16 November 2013

Work on pin and signal assignments.
Draw diagrams.  Make tables of assignments.
A lot of consulting of device data sheet.

Code primitive app domain i/o functions
Code device configuration, including i/o and clocks.


--------------------------------------------------------------------------------
17 November 2013

Learn how to use mplab.  Create project.
Find where mplab include files are located.
/opt/microchip/xc8/...

Start compiling.
Figure out what standard include files are needed.
  xc8.h
  stdint.h
  stdbool.h
  stddef.h

Start compiling code written yesterday.
Lots of misunderstanding about how to use bitfields.
Resolve by reading the include file.  There is no xc8.h include file.
Instead it gets redirected to a file corresponding to the processor name.

Learned that LATA5 is not defined for this processor.
This is the mclr-/vpp pin.  It can be used by software for input,
but not for output.

So swap the DR and ACK signals.
Otherwise I have to use the pins reserved for external oscillator.
Rather not do that.

Now compiling, except for the references to serial frame time constants.
I am not happy defining these manually.  Would rather the process be
automated.  Can't really define them with C code, as some of the numbers
are large, but used only for documentation purposes.

Reorganize fles.
Put into git.
Suppress build results.
Add temp time constants to enable complete compile/build.
Now getting error on static variables.

    #define DATA_BUF_SIZE 78;
    uint8_t data_buf[DATA_BUF_SIZE];    // line 350
    uint8_t data_pos = 0;

get this error:

    CLEAN SUCCESSFUL (total time: 66ms)
    "/opt/microchip/xc8/v1.21/bin/xc8" --pass1  --chip=16F1826 -Q -G  --double=24 --float=24 --opt=default,+asm,+asmfile,-speed,+space,-debug --addrqual=ignore --mode=free -P -N255 --warn=0 --asmlist --summary=default,-psect,-class,+mem,-hex,-file --output=default,-inhx032 --runtime=default,+clear,+init,-keep,-no_startup,+osccal,-resetbits,-download,-stackcall,+clib --output=-mcof,+elf "--errformat=%f:%l: error: (%n) %s" "--warnformat=%f:%l: warning: (%n) %s" "--msgformat=%f:%l: advisory: (%n) %s"    -obuild/default/production/main.p1  main.c 
    main.c:350: warning: (983) storage class redeclared for "uint8_t"
    main.c:350: error: (1098) conflicting declarations for variable "uint8_t" (/opt/microchip/xc8/v1.21/include/stdint.h:43)
    (908) exit status = 1
    make: *** [build/default/production/main.p1] Error 1

    BUILD FAILED (exit value 2, total time: 2s)

Really puzzled.  Looked at include file.  Dont' see anything strange.
Perhaps something general about static variables.
Maybe it is too big, not enough memory.
Maybe special directive is needed.
Back to google and compiler handbook.

Found a partial declaration several lines before.
Now building ok.

Looks like getting full complete build.
Using about 5 percent of the code space.  Seems sufficient.  No worries.
Using about half the data space, but only have one large buffer.
Do both debug and production builds.  Not sure what is the difference.

Not much going on with stack space.  But most if not all of my functions
would be inlined, I hope.  Perhaps there is an inline keyword.

Check if response from hilario. No.

Having trouble with simulator.
    org.netbeans.modules.viewmodel.TreeModelNode[name=][Name=, displayName=Line /home/bertd/dev-mine/digital-interface-clock-and-data/mplab.X/main.c:355 - Not resolvable to a valid memory address
    ]	

Can set break point.  But then when I start, it says it can't resolve address.
Sometimes can manage to break, and then do single stepping.

Learned a little.  I have only one build configuration, called "default".
Apparently i should have one called debug and prodcuction.  Not sure about
how this mapping works.  Anyway, not compiling for debug, and so some lines
are rearranged and optimized out.
Set debug option.

Turned off optimization and on debug.  No apparent change in behavior, though
I see changes in command lines.
Some lines you can set breakpoints on, and others you cannot.
However, once you find a place to break, it seems that you can single step
from there ok.

Read simulator manual.  Perhaps there is a way to see output bits in
time domain as a waveform.  Simulator help is dead link.

Find assembler listing.  Study generated code.  Seeing awkwardness when
assigning to bit field.  Getting code like this:

   695                           ;main.c: 171: LATBbits.LATB4 = c;
   696  07A6  0870               	movf	serial_clock_out@c,w
   697  07A7  0022               	movlb	2	; select bank2
   698  07A8  1D03               	skipz
   699  07A9  160D               	bsf	13,4	;volatile
   700  07AA  1903               	skipnz
   701  07AB  120D               	bcf	13,4	;volatile

Definitely not getting inlined.  And not sure i would want it.
This code is huge.  Boy am I glad I am using c.

The bad thing about this is that the timing varies depending on if the 
clock is going high or low.  Perhaps change the argument to clock_out
to be all 1s or all 0s.  Then and with the appropriate bit flag, and
or into the control register.  I think there is a way to do that.

Studied compiler features and license price.
Decide to stick with the free compiler.

Found stopwatch feature in simulator.  Set two breakpoints, find time
between them.  Have not tried.

Converted nearly all i/o functions to macros.
Got shorter and more consistent code.  Inline too.
Now using 7 percent of program memory.
All that is left to add in the input loop.  At most that will be about
the same as what is already done.  Looking good.

break several hours
------------------

Read about stop watch.  Got it going.
Times are 4x too large.
Divide xtal freq by 4.
Not sure what is going on here.
Need to count cycles, and check.

But it looks as if my data out function is taking too long,
Even if the delay is reduced to zero.

Found option in project config for simulator.
There is property that sets the simulated Fcyc frequency.
Instruction execution frequency.
This nomenclature is different from that used in data sheet.
Was set to Fcyc=1

Got times adjusted exactly.  Fairly sure it is correct.  Not much margin.
Came out almost exactly.  I think this project may be a test, just to see
if I can produce.  Actually not a bad idea.

Need to rethink my timing constants.  Not fitting what can be easily
measured.

Groom the ttd list.
Timing for frame0 is perfect.  Clock spacing bit to bit, and also
frame to frame.


-----------------------------------------------

18 November

Study data book to learn how to use timer.  Lot of details.
Document it carefully in source code.
Make an 8 bit counter in ram that increments every 1024 microseconds.
Approximately 1 millisecond.  Should be good enough.

Is it possible to clear the actual register in timer0 to reduce
jitter ?

Convert delays to use _delay() by instruction cycles.
More precise.  Also shorter generated code.

Use more derived macros for timing constants.  Fewer values to change.

Study simulator.  Not seeing any wiggles on output signals.

break
------

Took a nap.  Have idea for why simulator is not showing any activity.
Did not call device_configure() to set up the output ports.

Got response from hilario.  

Sorry, I was out. Yes, you can publish this work. My Email is hilario.h@maxavionics.com. Write to me there so I won't miss it. In regards to the PIC part number as I told you our equipment does not support that new part number.
[11/18 15:50:50]<Hilario>:	 I am trying to hold the PIC reset line low at power up to control when the PIC will start transmitting. So the PC program control the transmission. Is that possible?

Set up new project on github.

Respond to hilario by email.
clock accuracy
availability of set reset latch to eliminate two nand gates
can I use oscillator pins

Send second email to hilario, about potential problems.
Suggest cobs.
Suggest how to handle the wait for reset without any additional signals.

Study parallel port handshaking.  Some new issues found.  Add entries to
the ttd list.

try logic analyzer again.  Flat line.  Stuck in loop waiting for clock ready.
Notice that code is awkward and wastes a byte of ram for variable "ready".
Recode to avoid.

Perhaps the simulator does not implement this level of hardware fidelity ?
I think I need to order some hardware to test this myself.

Seeing waveforms on logic analyzer view in simulator.
There are no cursors to do time interval measurement like in real logic analyzer.
Only seeing activity on RB4.  This is supposed to be the data output.
And, I was expecting data to be all zeroes.
Period is about right for the clock.
Set a constant value for data.  A nice palindrome  0xA5

Was misinterpreting the legend on the logic analyzer.
Clock and data are on the right pins.
Timing looks good, but hard to measure exactly.  Close to stopwatch results.
Simulator is very slow when logic analyzer is on.































