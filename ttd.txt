Identify version of PIC to use.
  Done:  PIC16F1826
  Used device selector at microchip website.
  Recent, better on chip debug, and other features than 627 proposed by customer.
  Lower price that 627.
  Is the lowest price unit listed at microchip with sufficient pins and memory.

Obtain tools.
  Done:  Downloaded MPLAB X IDE for linux from microchip website.
  Also got a free C compiler.

Find some example code and learn how to simulate it on MPLAB.
  Some progress.  Found and downloaded example code.  Only found C.
  Looks easy so far.
  Got it to build.  No debug/simulate yet.
  Abandoned.

Make regularized frame timing hierarchy.
  Do ascii art timing diagrams.
  Assign names to all the times.
  Make as many formulas as possible.
  Minimize the set of independent times.
  Got it down to 5 constants.
  Made spread sheet to calculate the dependent times.
  
  The trouble with the provided timing diagram is that it was irregular and
  inconsistent in how it treated gaps after various repeated elements.
  Like gap is missing after last one in group.  Change that so gaps are
  uniform.  Will be able to make function to send each element, and then
  compose them easily.

  Will be able to change the constants to change timing, without messing
  with the code.
  Done.

Check that functions are being inlined
  this is to reduce stack usage, and to increase speed.
  if not inlined by default, look for inline keyword.
  After reading compiler manual, it now seems this is not going to work.
  It seems that the PRO version of compiler is required.
  Ignore inlining.

Reduce overhead for simple n times loop
  using for (i=n; i!=0, i--)
  huge amount of overhead, rougly 20 microseconds
  need to reduce this to meet timing constraint
  ---- 
  was unable to reduce it much.  A little.
  however, was able to use a do while and distribute the overhead
  into places where already doing a delay.
  Good enough.

Try changing buffer reference to use pointer
  instead of current use of subscript
  try to balance the loop overhead, move pointer increment to end
  ---
  using pointer is only slightly faster than using index
  doesn't matter where the pointer increment is done.
  Now using pointer.
  Tried to understand effect of "near" on pointers.  Failed.
  Closed.

Verify delay times by counting cycles.
  Make sure the delay makes sense, considering the clock rate
  I have selected.  There is mystery factor of 4.
  Does the simulator accurate handle changes to the clock ?
  Try changing the selected clock in OSCCON.
  -----------
  discovered mplab project property that sets simulation freq.
  unfortunately it uses different language than data sheet. 
  Fcyc rather than Fosc.  Too many free variables.
  Lots of reading data sheets.  No where does it clearly say this,
  but there is one diagram showing a four phase clock used for 
  internal execution of instructions.  Q1,Q2,Q3,Q4
  Set Fcyc to 4 MHZ.  Set XTAL_FREQ to 16 MHZ.
  The nop is taking 0.25 microseconds in stopwatch now, and in general
  that (0.25) microsecond is the smallest quantum of time observed.
  Times in stopwatch are matching times in __delay_us().
  Satisfied.

Figure out how to use simulator
  Code now set up to do output in a loop continuously.  No input.
  It is ready to run.  Need to verify timing in simulator.
  Done.


////////////////////////////////////////////////////////////////////////////////

Submit timing diagrams and constants for review.
  No response to my last message.  How to submit?

Make a python script to generate timing costants.
  Do this numerically. Use in both code and in docs.
  Having second thoughts if this is necessary.


Figure out how to use the timer
  This is needed so that it is possible to do PC input, while 
  controlling total time used for input.
  Obviously, if we are stuck in a delay loop, can't be doing handshaking
  with PC.

Go back and review timing hierarchy.  
  Is it as clear and simple as possible?
  Consider changing names.
  Make sure pyton generator and spreadsheet are consistent.
  Should gap4 be shown before frame4 ?
  Is the frame4 step even needed ?

Study generated code
  look for non-uniform timing, anything big or weird
  find differences between optimized and not, debug and not

Reconsider timing constants
  They do not correspond to things that can be easily measured with the
  stopwatch feature, or with a logic analyzer.
  Probably ought to go back

Consider moving to the _delay() function which operates in cycles,
  rather than __delay_us().  Can get exactly cycle accurate, without
  adding/subtracting nops.  Would have to adjust the time constants
  to be in units of cycles.  Need to keep integer math.






