Identify version of PIC to use.
  Done:  PIC16F1826
  Used device selector at microchip website.
  Recent, better on chip debug, and other features than 627 proposed by customer.
  Lower price that 627.
  Is the lowest price unit listed at microchip with sufficient pins and memory.

Obtain tools.
  Done:  Downloaded MPLAB X IDE for linux from microchip website.
  Also got a free C compiler.

Find some example code and learn how to simulate it on MPLAB.
  Some progress.  Found and downloaded example code.  Only found C.
  Looks easy so far.
  Got it to build.  No debug/simulate yet.
  Abandoned.

Make regularized frame timing hierarchy.
  Do ascii art timing diagrams.
  Assign names to all the times.
  Make as many formulas as possible.
  Minimize the set of independent times.
  Got it down to 5 constants.
  Made spread sheet to calculate the dependent times.
  
  The trouble with the provided timing diagram is that it was irregular and
  inconsistent in how it treated gaps after various repeated elements.
  Like gap is missing after last one in group.  Change that so gaps are
  uniform.  Will be able to make function to send each element, and then
  compose them easily.

  Will be able to change the constants to change timing, without messing
  with the code.
  Done.

Check that functions are being inlined
  this is to reduce stack usage, and to increase speed.
  if not inlined by default, look for inline keyword.
  After reading compiler manual, it now seems this is not going to work.
  It seems that the PRO version of compiler is required.
  Ignore inlining.

Reduce overhead for simple n times loop
  using for (i=n; i!=0, i--)
  huge amount of overhead, rougly 20 microseconds
  need to reduce this to meet timing constraint
  ---- 
  was unable to reduce it much.  A little.
  however, was able to use a do while and distribute the overhead
  into places where already doing a delay.
  Good enough.

Try changing buffer reference to use pointer
  instead of current use of subscript
  try to balance the loop overhead, move pointer increment to end
  ---
  using pointer is only slightly faster than using index
  doesn't matter where the pointer increment is done.
  Now using pointer.
  Tried to understand effect of "near" on pointers.  Failed.
  Closed.

Verify delay times by counting cycles.
  Make sure the delay makes sense, considering the clock rate
  I have selected.  There is mystery factor of 4.
  Does the simulator accurate handle changes to the clock ?
  Try changing the selected clock in OSCCON.
  -----------
  discovered mplab project property that sets simulation freq.
  unfortunately it uses different language than data sheet. 
  Fcyc rather than Fosc.  Too many free variables.
  Lots of reading data sheets.  No where does it clearly say this,
  but there is one diagram showing a four phase clock used for 
  internal execution of instructions.  Q1,Q2,Q3,Q4
  Set Fcyc to 4 MHZ.  Set XTAL_FREQ to 16 MHZ.
  The nop is taking 0.25 microseconds in stopwatch now, and in general
  that (0.25) microsecond is the smallest quantum of time observed.
  Times in stopwatch are matching times in __delay_us().
  Satisfied.

Figure out how to use simulator
  Code now set up to do output in a loop continuously.  No input.
  It is ready to run.  Need to verify timing in simulator.
  Done.

Consider moving to the _delay() function which operates in cycles,
  rather than __delay_us().  Can get exactly cycle accurate, without
  adding/subtracting nops.  Would have to adjust the time constants
  to be in units of cycles.  Need to keep integer math.
  ---------
  Manged to keep times in microseconds with fractions.
  Scale up to cycles, and cast to integer, all in a macro.
  Done.

Learn how to debug in assembly mode
  Very bad docs on this.  Lots of false info on the internet.
  Finally found something buried in the window menu.  Strange place.
  Gives access to debug disassembly.  Can set break points and single
  step.  Stop watch works. Was able to measure setup and hold times.
  setup = 14.5  hold=4

Hoisted the delays 
  take from inside frame function 
  move up to each call of each frame function
  this is because each call environment affects the delay
  to make it cycle accurate, have to adjust each one separately.
  Need the additional degrees of freedom

////////////////////////////////////////////////////////////////////////////////

Submit timing diagrams and constants for review.
  No response to my last message.  How to submit?

Make a python script to generate timing costants.
  Do this numerically. Use in both code and in docs.
  Having second thoughts if this is necessary.


Figure out how to use the timer
  This is needed so that it is possible to do PC input, while 
  controlling total time used for input.
  Obviously, if we are stuck in a delay loop, can't be doing handshaking
  with PC.

Go back and review timing hierarchy.  
  Is it as clear and simple as possible?
  Consider changing names.
  Make sure pyton generator and spreadsheet are consistent.
  Should gap4 be shown before frame4 ?
  Is the frame4 step even needed ?

Study generated code
  look for non-uniform timing, anything big or weird
  find differences between optimized and not, debug and not

Reconsider timing constants
  They do not correspond to things that can be easily measured with the
  stopwatch feature, or with a logic analyzer.
  Probably ought to go back to values more like the original spec.


Find ways to reduce timing jitter associated with use of timer0.
  When we start, can the timer0 register be cleared, so we get an
  even number of periods.

Learn more about the simulator
  how to use logic analyzer mode, stimulus, etc

Are oscillator pins available for use as signals
  is internal oscillator accurate enough?
  waiting for answer from Hilario

Do we want to use the set reset latch?
  this can replace two external nand gates
  it would be pin neutral
    the strobe would have to go to PIC pin
    however the latch output would be then available internally
    and its pin no longer used

hilario wants a way to suspend output until sending side is ready
  can be handled in software with additional state variable
  or can add a wait input
  or can hold the PIC in reset

Possibly add an error signal going back to the host PC
  parallel ports have a paper error signal

Have proposed using COBS
  this is beyond scope of project, but could add a new milestone
  waiting for answer from Hilario

Question about handshaking with PC
  only the BUSY output is routed back to the PC
  the parallel port uses both ACK and BUSY
  is it ok to leave off ACK?  Seems that many times the host ignores ACK.

Another question about handshaking with PC
  if a traditional parallel port is used, then there is a problem
  with latching the 8 data bits.  parallel port assumes that the
  receiver will latch data on rising edge of strobe.  However, PIC
  has no way to do this.  All inputs are async.  Either non-standard
  host side handshaking, or a '374 style latch is needed at PIC.

Obtain hardware for test and debug
  realistically cannot rely on simulator
  i need to test on real hardware, otherwise customer will be unhappy
  Bert's law - if it hasn't been fully tested, it doesn't work


Another question for Hilario
  What package is he using ?  DIP ? or something smaller ?
  Does it matter?  Can I use a DIP for testing ?




